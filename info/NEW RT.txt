
[a] = (t, [a]) | ()
´[a] = (t, ´[a], ´[a]) | ()
´[a] = (t, ´[a]... ´[a]) | ()
'[a] = ('[a], '[a]) | a | ()
''[a] = ('[a], ''[a] ... ''[a]) | a | ()


Core interfaces
Some of these have typevars of N-ary elements.
We auto-generate most cases above 2.

----------



something like:

RT
    Seq      arrayToSeq(Object[])
    Object[] seqToArray(Seq)

INTERFACES:

Seq
    Object head()
    Seq    tail()
Tree
    Object node()
    Object getSelf()
    Seq    getChildren()
    Seq    getGrandChildren()
    Seq    inorderSeq()
    Seq    preorderSeq()
    Seq    postorderSeq()
    Seq    breadthSeq()
Binding
    Object getKey()
    Object getValue()
Env
    boolean hasBinding(Object k)
    Env     getParent()
    Env     extend(Object k, Binding b)
    void    update(Object k, Binding b)
    Seq     getBindings()
    Seq     getKeys()
    Seq     getValues()
Eq
    boolean eq(Object o)
Match
    boolean match(Object o)
Function
    Object   apply(Object[])
    Object[] applyInverse(Object)
    


                





or:



    
    vitry.runtime   
        P_N             
        implements Destructible
            Value   _1()
            Value   _2()
            ...
            Value   _n()
        F_N         
        implements Invertible
            Value   _1()
            Value   _2
            ...
            Value   _n


        Destructible
            List    destruct()
        List
            Value   first()
            List    rest()        
        Tree
            Value   node()
            Tree    getSelf()
            List    in()
            List    pre()
            List    post()
            List    breadth()
        Set    
            values()    
        Arrow
            from()
            to()    

