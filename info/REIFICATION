



The reification system of provides adresses the subtle problem of structural representation in the core language. Functional programming languages are generally shrinkable to a core language consisting of lambda calculus and typing logic. This is also the case with Vitry, whose core language is a lambda calculus with pattern composition and decomposition. Therefore the underlying representation of patterns is hidden from the user.
                                         
Reificitation is a facility to reimplement the core data types of Vitry in terms of its own data structures. The system was designed to preserve invariants on core types, thus providing the user with explicit control over performance and memory, while not affecting the semantics.

Vitry provides reification of all its core data types including:
    - Tuples and products
    - Sets
    - Unions
    - Intersections
    - Lists
    - Function types
    
One benefit of the reification system is that Vitry may be bootstrapped using naive implementations of all these structures. Better implementations may then be written as general purpose data types in the language itself; these may also be used in a library fashion whenever explicit structural representation is required, or when the semantics of the core types are too restricted.


Basic concepts of this library:
    - Protocols provides procedural reification (interface/type class-style).
      The various protocols represent basic computation models (sequential,
      paralell, associative etc).
    - Blocks provides contagious, dynamically allocated memory (objects).
    - Structors (constructors/destructors) rewrite products to block-based
      structures and vice versa based on the inductive notation "...".
      Structors are expressed through pattern matching the structure.


Protocols

The seq and par protocols represent sequential and parallel computation. Based on Guy Steele's "Organizing functional code for parallel execution". 

Runtime library uses of seq and par:
    - Pattern matching
    - Construction/deconstruction

seq protocol:
    head  : seq a -> a
    tail  : seq a -> seq a
    cons  : a -> seq a -> seq a
    null  : seq a?
    
    where 
        (cons (first a) (rest a)) == a
    
par protocol:  
    item      : par a -> a
    node      : a -> par a
    split     : par a -> (par a -> par a -> b) -> b
    conc      : par a -> par a -> par a
    null      : par a?
    singleton : par a?

    where 
        (list (item a)) == a
        (split a (fn (left right) (conc left right))) == a

queue protocol:
    min     : queue a -> a
    merge   : queue a -> queue a -> queue a
               


The rand protocol specifies basic random access.

Runtime library uses of rand:
    - Records

rand protocol:
    nth : rand a -> nat -> a




Blocks

???
    
block : nat -> block
put   : block -> nat -> a -> block
get   : block -> nat -> a




 
Structors

Conceptual examples:
    seq     
        () <-> ()
        (a) <-> (a, ())
        (a, b, ...) <-> (a, (b, ...()))

        inferred:
          first ()     = error
          rest  ()     = error
          first (a, _) = a
          rest  (a, b) = b
          cons   a b   = (a, b)
    par
        () <-> ()
        (a) <-> (a)
        (a, ..., b, ...) <-> ((a, ...), (b, ...))

















t  := v 
    | t t 
    | \t.t 
    | t,t...t
    | \(t,t..t).t
     
P  := t?
    | {t ...}
    | (P | P)
    | (P & P)
    | t' -> T
   
t' := T
    | ∀X.t
    
