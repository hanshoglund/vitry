

The reification system of provides adresses the subtle problem of structural representation in the core language. Functional programming languages are generally shrinkable to a core language consisting of lambda calculus and typing logic. This is also the case with Vitry, whose core language is a lambda calculus with built-in pattern constructors and destructors. Therefore the underlying representation of patterns is not accessible in the language by default.
                                         
Reificitation is a facility to reimplement the core data types in terms of its own data structures, providing the user with explicit control over performance and memory, while not affecting the semantics.

Vitry provides reification of all its core data types including:
    - Tuples and products
    - Sets, unions and intersections
    - Lists
    
Vitry may thus be bootstrapped using naive implementations of all these structures. Other implementations may then be written as general purpose data types in the language itself; these may also be used in a library fashion whenever explicit structural representation is required, or when the semantics of the core types are too restricted.


Basic concepts :
    - Protocols provides procedural reification (interface/type class-style).
      The various protocols represent basic computation models (sequential,
      paralell, associative etc).
    - Blocks provides dynamically allocated memory (C structs/JVM objects etc).
    - Structors (constructors/destructors) rewrite products to block-based
      structures and vice versa based on the inductive notation "...".
      Structors are expressed through pattern matching.


Protocols

The seq and par protocols represent sequential and parallel computation.

Runtime library uses of seq and par:
    - Pattern matching
    - Construction/deconstruction

seq protocol:
    head  : seq a -> a
    tail  : seq a -> seq a
    cons  : a -> seq a -> seq a
    null  : seq a?
    
    where 
        (cons (first a) (rest a)) == a
    
par protocol:  
    TODO


The lookup protocol specifies basic random access.

Runtime library uses of lookup:
    - Records
    - Environments (top-level, let and fn)
    
rand protocol:
    nth : rand a -> nat -> a




Blocks

???
    
block : nat -> block
put   : block -> nat -> a -> block
get   : block -> nat -> a




 
Structors

Conceptual examples:
    seq     
        () <-> ()
        (a) <-> (a, ())
        (a, b, ...) <-> (a, (b, ...()))

        inferred:
          first ()     = error
          rest  ()     = error
          first (a, _) = a
          rest  (a, b) = b
          cons   a b   = (a, b)
    par
        () <-> ()
        (a) <-> (a)
        (a, ..., b, ...) <-> ((a, ...), (b, ...))










