

Strategy:


    class TailCall extends Throwable {
        @Override fillInStackTrace()
        Function f
        Object[] as
    }
        
    ThreadLocal<Int> stackDepth = 0;     
    
    To tail call:
            
        sd = stackDepth.get()
        if (sd < MAX_STACK_SIZE)
        {       
            stackDepth.set(sd++)
            return fn.call(args)
        }
        else
        {
            throw new TailCall(fn, args)
        }
        
    Eventually, it may be faster to always throw than to check
    the ThreadLocal. Could we get the stack size in a faster way?
    E.g. by passing it around as an extra param?
    
    See benchmarks below.
        
    Calling GTCO-enabled code:

        while(true) // this is the trampoline
        {
            try
            {
                res = fn.call(args);
                break;
            }             
            catch (TailCall tc)
            {
                fn = tc.fn;
                args = tc.args;
            }
        }
        
     
Much faster to use Map<Thread, Integer> than ThreadLocal!
     
    
At 1024 interations:
Always jumping took 2 ms
Depth checking took 1 ms

At 8192 interations:
Always jumping took 7 ms
Depth checking took 8 ms

At 16384 interations:
Always jumping took 15 ms
Depth checking took 17 ms

At 65536 interations:
Always jumping took 23 ms
Depth checking took 26 ms
  
At 1 048576 interations:
Always jumping took 95 ms
Depth checking took 51 ms

At 2 097152 interations:
Always jumping took 172 ms
Depth checking took 79 ms

At 33 554432 interations:
Always jumping took 1915 ms
Depth checking took 842 ms


