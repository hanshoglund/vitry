; Vitry, copyright (C) Hans Hoglund 2011
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;
; See COPYING.txt for details.


module Vitry.Prelude

; native: nil true false bool empty
;         () [] {} _
;         (,) [,] {,} (|) (&) (->) (<->)
;         ==

not  x = match x
    _ : true = false
    _ : false = true

(!=) x y = not (x == y)

(&&) x y = match (x, y)
    (_:true, _:true) = true
    (_:bool, _:bool) = false

(||) x y = match (x, y)
    (_:true, _:bool) = true
    (_:bool, _:true) = true
    (_:bool, _:bool) = false

; native: arity id const flip (.) (..)

iter f n = match (f, n)
    (f, 0) = f
    (f, i) = f . (iter f (i - 1))


; native: nat int rat float
;         double complex 
;         char str

prec = nat
     | int
     | rat
real = float
     | double
     | complex
num  = prec
     | real
        

__Math       = class "Math"
__BigInteger = class "java.math.BigInteger"

sqrt    =  method __Math        "sqrt"    [ `double ]
ln      =  method __Math        "log"     [ `double ]
abs     =  method __Math        "abs"     [ `double ]
sin     =  method __Math        "sin"     [ `double ]
tan     =  method __Math        "tan"     [ `double ]
cos     =  method __Math        "cos"     [ `double ]
asin    =  method __Math        "asin"    [ `double ]
atan    =  method __Math        "atan"    [ `double ]
acos    =  method __Math        "acos"    [ `double ]
round   =  method __Math        "round"   [ `double ] 
        .. method __BigInteger  "valueOf" [ `long   ]
ceil    =  method __Math        "ceil"    [ `double ]
floor   =  method __Math        "floor"   [ `double ]
logn n  =  ln .. (* (1. / ln n))
log     =  logn 10.
log2    =  logn 2.

isOdd  x = x % 2 == 1
isEven x = x % 2 == 0
isZero x = match x
    _:0  = true
    _:0. = true
    _    = false
isPositive x = x > 0
isNegative x = x < 0 
; TODO isPrime

sum     = foldl (+) 0
product = foldl (*) 1








isEmpty xs = xs == {} || xs == ()



length    = foldl (fn (x y) x + 1) 0
find pred = foldl (fn (x y) if (pred y) y else x) ()


; interleave xs ys = foldr (fn (a b) xxx) [] (xs ys)
    
zipWith f xs ys =
    match (f, xs, ys)
        (f, (x, xs), (y, ys))     = cons (f x y) (zipWith f xs ys)
        (_, _, _)                 = ()

zip = zipWith (,)
interleave xs ys = foldr (fn ((x,y) zs) [x] ++ [y] ++ zs) [] (zip xs ys)


; map_ f    = foldr (cons . f) ()





version = method (class "VitryRuntime") "getVersion" []