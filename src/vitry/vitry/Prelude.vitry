; Vitry, copyright (C) Hans Hoglund 2011
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;
; See COPYING.txt for details.

module Vitry.Prelude


; ======================================================================
; Internals (not part of the prelude definition)
; ======================================================================

; native: rewrite seq array symbol string
;         class new method classOf

OBJECT           = class "Object"
CLASS            = class "Class"
STRING           = class "String"
TO_NATIVE_CLASS  = (method CLASS "forName" [STRING]) . string
CAST cl          = (method CLASS "cast" [OBJECT]) (TO_NATIVE_CLASS cl)

THREAD_LOCAL     = class "ThreadLocal"
THREAD_LOCAL_GET = method THREAD_LOCAL "get" []
THREAD_LOCAL_SET = method THREAD_LOCAL "set" [OBJECT]
THREAD_SLEEP     = method (class "Thread") "sleep" [`long]

MATH             = class "Math"
NUM              = class "Number"
INT              = class "java.math.BigInteger"
RAT              = class "BigRational"

ABS              = method MATH "abs" [`double]
NUM_TO_LONG      = method NUM "longValue" []
NUM_TO_DOUBLE    = method NUM "doubleValue" []
RAT_TO_INT       = method RAT "bigIntegerValue" []
LONG_TO_INT      = method INT "valueOf" [`long]
DOUBLE_TO_RAT    = method RAT "valueOf" [`double]
MATH_PRIM name   = method MATH name [`double]

RANDOM           = class "java.util.Random"
RANDOM_INST      = new RANDOM []
RAND_FLOAT       = method RANDOM "nextFloat" []
         
NATIVE_SET       = class "NativeSet"
GET_NATIVE_SET   = method NATIVE_SET "forClass" [CLASS] . TO_NATIVE_CLASS


; ======================================================================
; Basic types and constructors
; ======================================================================

; native: nil true false bool empty
;         () [] {} _
;         (,) [,] {,} (|) (&) (->) (<->)

; native: arity 
;         id const flip (.)

iter f n = match (f, n) 
    (f, 0) = id
    (f, i) = f . (iter f (i - 1))

(.')  f g = fn (x y) f (g x y)

left  x y = x
right x y = y


; native: (==)

not  x = match x
    _ : true  = false
    _ : false = true

(!=) x y = not (x == y)

(||) x y = match (x, y)
    ( _ : true , _ ) = true
    ( _ , _ : true ) = true
    _                = false

(&&) x y = match (x, y)
    ( _ : true, _ : true ) = true
    _                      = false

; native: nat int rat float
;         double complex
;         char str

prec = nat | int | rat
real = float | double
num  = prec | real


; ======================================================================
; Ordering and enumeration
; ======================================================================

; native: (<) (>)

(>=) x y = x > y || x == y
(<=) x y = x < y || x == y

; Enumeration functions
; To be used with case-extension
zeroth x = match x (x : prec = 0) (x : real = 0.0)
succ x   = match x (x : prec = x + 1) (x : real = x + 1.0)
pred x   = match x (x : prec = x - 1) (x : real = x - 1.0)
enum x n = (iter succ n) (zeroth x)

smaller = `smaller
equal   = `equal
larger  = `larger
order   =  smaller | equal | larger

; Standard comparison, used by sort
; May be used by extending (<) and (>), or by extending compare
; a -> a -> order 
compare  x y = if (x < y) `smaller else if (x == y) `equal else `larger

; Utility comparison
; TODO define in terms of compare?
largest  x y = if (x > y) x else y
smallest x y = if (x < y) x else y
max xs = foldl largest (head xs) (tail xs)
min xs = foldl smallest (head xs) (tail xs)



; ======================================================================
; Arithmetic
; ======================================================================

; native: (+) (-) (*) (/) (%) (^)
;         NaN Infinity

e  = 2.718281828459045
pi = 3.141592653589793

abs x = match x
    x : prec = if (x < 0) (-x) else x
    x : real = ABS x

negate x = -x

; TODO signum recip
;      gcd lcm

sqrt  =  MATH_PRIM "sqrt"
ln    =  MATH_PRIM "log" 
sin   =  MATH_PRIM "sin" 
tan   =  MATH_PRIM "tan" 
cos   =  MATH_PRIM "cos" 
asin  =  MATH_PRIM "asin"
atan  =  MATH_PRIM "atan"
acos  =  MATH_PRIM "acos"
ceil  x : num = match x 
    x : real = (MATH_PRIM "ceil") x
    x : rat = (method RAT "ceil" []) x
    x : int = x
floor x : num = match x
    x : real = (MATH_PRIM "floor") x
    x : rat = (method RAT "floor" []) x 
    x : int = x

round       = LONG_TO_INT . MATH_PRIM "round"
approx      = NUM_TO_DOUBLE
rationalize = DOUBLE_TO_RAT

logn n : real = (* (1.0 / ln n)) . ln
log           = logn 10.0
log2          = logn 2.0

isOdd      x : num = x % 2 == 1
isEven     x : num = x % 2 == 0
isZero     x : num = match x (0 = true) (0.0 = true) (_ = false)
isPositive x : num = match x (x : prec = x > 0) (x : real = x > 0.0) 
isNegative x : num = match x (x : prec = x < 0) (x : real = x < 0.0)
isNan      x : num = (x == NaN)
isInfinite x : num = (x == Infinity)
isNumber   x : num = not (isNan x)
isFinite   x : num = not (isInfinite x) && not (isNan x)

sum     = foldr (+) 0
product = foldr (*) 1
mean xs = sum xs / length xs



; ======================================================================
; Lists
; ======================================================================

; native: (++)
;         prepend head tail 
;         init last

; [++] = (++)

append x = flip (++) [x]
length   = foldr ((+ 1) .' right) 0
rank xs  = match xs
    _ : []     = 1
    _          = (succ . max . (map rank_)) xs
rank_ xs =  match xs
    _  : ()    = 1
    xs : [ _ ] = rank xs
    _          = 0
              
isEmpty xs = match xs
    _ : ()      = true
    _           = false
isSingle xs = match xs
    _ : ()      = false
    (x, _ : ()) = true
    _           = false


; native: index drop take
;         map foldl foldr
;         (..) sortBy reverse

; Remove the given index
; int -> [a] -> [a]
remove n xs = (take n xs) ++ (drop (succ n) xs)

; int -> int -> [a] -> [a]
substr m n = take n . drop m

; TODO scanl
; TODO scanr


; Searching
             
; a -> [a] -> int
; native: search

; (a -> bool) -> [a] -> (a | ())
find pred = foldl (fn (x y) if (pred y) y else x) ()

; (a -> bool) -> [a] -> [a]
filter pred xs = match (pred, xs)
    _,     _ : () = ()
    pred, (x, xs) = if (pred x)
                       filter pred xs
                       prepend x (filter pred xs)
                       
; (a -> bool) -> [a] -> [a]                       
retain pred = filter (not . pred)

; [a] -> [a]
sort = sortBy compare

; [bool] -> bool
some  = foldr (||) false
every = foldr (&&) true
none  = not . some


; Infinite lists

; a -> [a]
loop       x  = prepend x (delay loop x)

; [a] -> [a]
cycle      xs = xs ++ (delay cycle xs)
palindrome xs = let sx = reverse xs
                    xs ++ sx ++ (delay palindrome xs)    

; Make an infinite list by unfolding
; (a -> (a, a)) -> a -> [a]
unfold  f x = let (y, x) = f x
                  prepend y (delay unfold f x)

; Common progressions 
; prec -> prec -> prec
arith d = unfold (fn (x) (x, x + d))
geom  d = unfold (fn (x) (x, x * d))

fib x y = prepend x (delay fib y (x + y))
rands n = map (fn (x) random n) (loop 1)

harm    = map (/ 1) (arith 1 1)
fibs    = fib 0 1



; Zip and friends

zipWith f xs ys = match (f, xs, ys)
    _,  _ : (),  _      = ()
    _,  _,       _ : () = ()
    f, (x, xs), (y, ys) = prepend (f x y) (delay zipWith f xs ys)

zip3With f xs ys zs = match (f, xs, ys, zs)
    _,  _ : (),  _,       _      = ()
    _,  _,       _ : (),  _      = ()
    _,  _,       _,       _ : () = ()
    f, (x, xs), (y, ys), (z, zs) = prepend (f x y z) (delay zip3With f xs ys zs)

zip  = zipWith  (,)
zip3 = zip3With (,)

; Repeat each element n times
; int -> [a] -> [a]
repeat n xs = match xs
    _ : ()  = ()
    (x, xs) = (take n (loop x)) ++ (delay repeat n xs)

dup  = repeat 2
tri  = repeat 3
quad = repeat 4

interl xs ys = match (xs, ys)
     _ : (),  _      = ()
     _,       _ : () = ()
    (x, xs), (y, ys) = [x, y] ++ (delay interl xs ys)

interl3 xs ys zs = match (xs, ys, zs)
     _ : (),  _,       _      = ()
     _,       _ : (),  _      = ()
     _,       _,       _ : () = ()
    (x, xs), (y, ys), (z, zs) = [x, y, z] ++ (delay interl3 xs ys zs)


interp y xs = match (y, xs)
    _,  _ : ()     = ()
    _, (x, _ : ()) = [x]
    y, (x, xs    ) = [x, y] ++ (delay interp y xs)


; Utils

; str -> [a] -> str
join s = foldr (++) "" . interp s . map string

; Force and buffer n values
buffer n xs = force (take n xs) ++ drop n xs
bufferStream n xs = (force (take n xs)) ++ (delay (bufferStream n (drop n xs)))


; ======================================================================
; System
; ======================================================================

; native: now random
;         parse print parseFile eval error
;         readFile writeFile
;         repl load quit

version    = (method (class "VitryRuntime") "getVersion" []) ()
versionStr = join "." (map string version)


reference         = GET_NATIVE_SET THREAD_LOCAL
createReference _ = new THREAD_LOCAL []
get r             = THREAD_LOCAL_GET r
set r x           = 
    do THREAD_LOCAL_SET r x
       r

; (a -> b) -> a -> (() -> b)
pluck f x = (fn (_) f x)


randomFloat _ = RAND_FLOAT RANDOM_INST

; Return a function that invokes one of the given functions
; for each invocation
; (a -> b) -> (a -> b) -> a -> b
decide  f g x = match (random 2) (0 = f x) (1 = g x)

; [a] -> a
pick    xs    = index (random (length xs)) xs
; [a] -> [a]
shuffle xs    = match xs
    _ : ()      = ()
    (x, _ : ()) = [x]
    (_, _    )  = do n = (random (length xs))
                     prepend (index n xs) (delay shuffle (remove n xs))


; TODO read
; file -> [int]
; file -> [char]
           
PROCESS         = class "Process"
PROCESS_BUILDER = class "ProcessBuilder"
PRINT_STREAM    = class "java.io.PrintStream"
SYSTEM          = class "System"
PUSHER          = class "vitry.runtime.util.Pusher"
START           = method PROCESS_BUILDER "start" []
WAIT_FOR        = method PROCESS "waitFor" []
GET_IN          = method PROCESS "getInputStream" []
GET_ERR         = method PROCESS "getErrorStream" []
PUSHER_START    = method PUSHER "start" []
PUSHER_STOP     = method PUSHER "stop" []
   
; Run a separate process, redirecting its output to standard out
; [str] -> ()
run command =
    do builder = new PROCESS_BUILDER [sarray command]
       process = START builder
       
       ; Use a pusher to stdout
       in      = GET_IN process
       pusher  = new PUSHER [in, __stdout]
       PUSHER_START pusher
       
       ; TODO fix so that we can pass subclasses as new args to push err as well...

       ; TODO ideally we should block until the pusher
       ; has extracted all output or we may miss some...
       WAIT_FOR process                              
       ()



; Sleep the current thread for time ms
; int -> int
sleep time = do time = NUM_TO_LONG time
                THREAD_SLEEP time
                time

; Invoke a function and return execution time in ms
; (a -> b) -> int    
bench f    = do start = now ()
                f ()
                now () - start
