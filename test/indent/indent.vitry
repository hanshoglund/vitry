(fn ((x y z) M))
(let (a = 1)
    (b = 2)
    (c))
(do  (a = 1)
    (b)
    (c = 2))
(match (x)
    (a b)
    (c d))
(if (a < b)
    (a)
    (b))
("========== Declarations ==========")
(module A)
(module A.B)
(module A foo bar)
(module A
    (foo)
    (bar))
(import (A.B))
(import (A.B as C)
    (X.Y as Z))
(import
    (A.B as C)
    (X.Y as Z))
(import
    (A
        (B as X)
        (C as Y)))
(type (a = b | c))
(type (a = b | c))
(type (list a = () | list a )
     (tree a = (a) | (tree a, tree a)))
(type (list a = () | list a)
     (tree a = (a)  | (tree a, tree a)))
(implicit (a -> b)
         (c -> d))
(implicit
    (a -> b)
    (c -> d))
(infix (left 2 (*))
      (right 1 (+)))
(infix
    (left 2 (*))
    (right 1 (+)))
("========== Simple assignments ==========")
(foo = 1)
(foo =
    (1))
(foo = 1 + 2)
(foo =
    (1 + 2))
(str = "a very long engagement a very long engagement " + "a very long engagement a very long engagement " + "a very long engagement a very long engagement " + "a very long engagement a very long engagement "))
("========== Equational assignments ==========")
(foo (x = 1))
(foo (x y = 1)
    (_   = 2))
(foo
    (x y = 1)
    (_   = 2))
("========== Fn ==========")
(f = fn (x) x)
(f = fn (x) 
    (x))
(f = fn 
    (x)
    (x))
(f = fn (x y z) x + y + z)
(f = fn (x y z) 
    (x + y + z))
(f = fn
    (x y z)
    (x + y + z))
("========== Let ==========")
(foo = let x = 1
        (y = 2)
        (x + x))
(foo = let (x = 1) (y = 2) x + x)
(foo = let x = 1
    (x + x))
(foo =
    (let (x = 1)
        (x + x)))
("========== Do ==========" )
("========== Match ==========")
("========== If ==========")
(if ((a < 1) `small `big))
(if ((a < 1) `small)
    (`big))
(if ((a < 1))
    (`small)
    (`big))
(if (a < 1 )
    (`small)
    (`big))
(if ((a < 1) `small else `big))
(if ((a < 1) )
    (`small )
    (else (`big)))
(if (a < 1 )
    (`small)
    (else (`big)))
("========== More infix ==========")
(a = 1 + 2 * 3)
(a = -1 * 2)
(a = 1 + 2 * 3))
(a = 1 + 2 * 3)

