; Test by 
; java -cp bin:lib/* vitry.runtime.launch.IndentFile test/vitry/indent.vitry > test/indent/indent.vitry





"========== Declarations =========="

module A
module A.B
module A foo bar
module A
    foo
    bar

import A.B
import A.B as C
       X.Y as Z
import
    A.B as C
    X.Y as Z
import
    A
        B as X
        C as Y
implicit a -> b
         c -> d
implicit
    a -> b
    c -> d

infix left 2 (*)
      right 1 (+)
infix
    left 2 (*)
    right 1 (+)
                                  
type a = b | c
type a = b
       | c
type list a = () | list a 
     tree a = (a) | (tree a, tree a)
type list a = ()
            | list a
     tree a = (a)
            | (tree a, tree a)

"========== Simple assignments =========="

foo = 1
foo =
    1
foo = 1 + 2
foo =
    1 + 2

str = "a very long engagement a very long engagement "
        + "a very long engagement a very long engagement "
        + "a very long engagement a very long engagement "
        + "a very long engagement a very long engagement "

str = "a very long engagement a very long engagement " +
    "a very long engagement a very long engagement " +
        "a very long engagement a very long engagement "

"========== Equational assignments =========="

; FIXME one ) is missing
foo x = 1
foo x y = 1
    _   = 2
foo
    x y = 1
    _   = 2

; with inline etc


"========== Fn =========="
f = fn (x) x

f = fn (x) 
    x

f = fn 
    x
    x

f = fn (x y z) x + y + z

f = fn (x y z) 
    x + y + z

f = fn
    x y z
    x + y + z

"========== Let =========="

; Do we need inline let ?

foo = let x = 1
          y = 2
          x + x

foo = let x = 1
    x + x

foo =
    let x = 1
        x + x



"========== Do ==========" 

do  f = openFile "name"
    chars = stream f
    write processChars f
    close f

input = do f = openFile
    stream f

input = do 
    let fileName = transformName "name"
        f = openFile fileName
    stream f


"========== Match =========="

match str
    "hans" = 1
    "sven" = 2
    (_, _) = "pair"
                       
match str
    "sven" = 2
    let h = "hans"
        h = 1
    (_, _) = "pair"


"========== If =========="

; TODO do not enclose if!

if (a < 1) `small `big
         
if (a < 1) `small
    `big

if (a < 1)
    `small
    `big

if a < 1 
    `small
    `big

if (a < 1) `small else `big

if (a < 1) 
    `small 
    else `big

if a < 1 
    `small
    else `big


"========== More infix =========="
a = 1 + 2 * 3
a = -1 * 2
a = 1
    + 2
        * 3
a = 1
        + 2
  * 3
  
a


