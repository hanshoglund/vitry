
module Fsm (main)

import
    InputOutput

names = shuffle `fresh ["Hans", "Mats", "Isak", "David", "Maria", "Mattias", "Max", "Tim", "Jason"]
engine = "circo"
degree = 2


rotate list steps = 
   let n = steps %% (length list)
        take (list n) ++ take (list 0 n)
    

skiffle list degree =
   let length = (length list)
       lengthDegree = length / degree
       reverse (gen list)

gen list = 
   let i = lastIndexOf list
       nth list (floor (i % degree * lengthDegree + i/degree)) . gen list (i - 1))


nodes = join [ (format "%n [label = %n] \n  " n) | n = names ]
    ++ "\n    Start [shape = diamond] "

connections = (join (names ++ (first names)) " -> ") 
    ++ " " ++ "\n    Start -> " ++ pick names


main = do
    let buffer = getCharBuffer
        read getReader "./fsm_bu.dot" buffer
        rewrite buffer "${nodes}" nodes
        rewrite buffer "${connections}" connections
        write buffer buffer getWriter "./fsm.dot"

    exec (engine + " fsm.dot -Tgif -o fsm.gif") (file ".") `block
    print "Done!"
